[JVMCI properties]
jvmci.Compiler = null                                                     [String]
          Selects the system compiler. This must match the getCompilerName() value returned by a jdk.vm.ci.runtime.JVMCICompilerFactory provider. An empty string or the value "null" selects a compiler that will raise an exception upon receiving a compilation request.
jvmci.InitTimer = false                                                  [Boolean]
          Specifies if initialization timing is enabled.
jvmci.PrintConfig = false                                                [Boolean]
          Prints VM configuration available via JVMCI.
jvmci.AuditHandles = false                                               [Boolean]
          Record stack trace along with scoped foreign object reference wrappers to debug issue with a wrapper being used after its scope has closed.
jvmci.TraceMethodDataFilter = null                                        [String]
          Enables tracing of profiling info when read by JVMCI.
          Empty value: trace all methods
          Non-empty value: trace methods whose fully qualified name contains the value.
jvmci.UseProfilingInformation = true                                     [Boolean]
          
[Graal properties]
graal.AOTInline = true                                                   [Boolean]
          Perform method inlining in the AOT compiled native image
graal.AOTInliningDepthToSizeRate = 2.5                                    [Double]
graal.AOTInliningSizeMaximum = 300                                       [Integer]
graal.AOTInliningSizeMinimum = 50                                        [Integer]
graal.AOTPriorityInline = true                                           [Boolean]
          Enable use of priority inlining during AOT compilation.
graal.AOTTrivialInline = true                                            [Boolean]
          Perform trivial method inlining in the AOT compiled native image
graal.APIFunctionPrefix = "graal_"                                        [String]
          Prefix that is added to the names of API functions.
graal.ASMInstructionProfiling = null                                      [String]
          Enables instruction profiling on assembler level. Valid values are a
          comma separated list of supported instructions. Compare with subclasses
          of Assembler.InstructionCounter.
graal.AbortOnBenchmarkCounterOverflow = false                            [Boolean]
          Abort VM with SIGILL if benchmark counters controlled by the
          (Generic|Timed|Benchmark)DynamicCounters
          option overflow. This feature is only supported on AMD64.
          WARNING: No descriptive error message will be printed! In case of an overflow,
          manual inspection of the emitted code is required.
graal.AddAllCharsets = false                                             [Boolean]
          Make all hosted charsets available at run time
graal.AddAllFileSystemProviders = true                                   [Boolean]
          Make all supported providers returned by
          FileSystemProvider.installedProviders() available at run time.
graal.AggregatedMetricsFile = null                                        [String]
          File to which aggregated metrics are dumped at shutdown. A CSV format
          is used if the file ends with .csv otherwise a more human readable
          format is used. If not specified, metrics are dumped to the console.
graal.AlignedHeapChunkSize = 1048576                                        [Long]
          The size of an aligned chunk.
graal.AllocateInstancePrefetchLines = 1                                  [Integer]
          Number of cache lines to load after the object address using prefetch
          instructions generated in JIT compiled code.
graal.AllocatePrefetchDistance = 256                                     [Integer]
          Sets the size (in bytes) of the prefetch distance for object
          allocation. Memory about to be written with the value of new objects is
          prefetched up to this distance starting from the address of the last
          allocated object. Each Java thread has its own allocation point.
graal.AllocatePrefetchInstr = 0                                          [Integer]
          Sets the prefetch instruction to prefetch ahead of the allocation
          pointer. Possible values are from 0 to 3. The actual instructions
          behind the values depend on the platform.
graal.AllocatePrefetchLines = 3                                          [Integer]
          Number of cache lines to load after the array allocation using prefetch
          instructions generated in JIT compiled code.
graal.AllocatePrefetchStepSize = 16                                      [Integer]
          Sets the step size (in bytes) for sequential prefetch instructions.
graal.AllocatePrefetchStyle = 1                                          [Integer]
          Generated code style for prefetch instructions: for 0 or less no
          prefetch instructions are generated and for 1 or more prefetch
          instructions are introduced after each allocation.
graal.AllocationBeforePhysicalMemorySize = 1048576                          [Long]
          Bytes that can be allocated before asking what the physical memory size
          is
graal.AllocationProfiling = false                                        [Boolean]
          Enable runtime profiling of allocation
graal.AllocationProfilingThreshold = 1048576                             [Integer]
          The minimum size in bytes required for printing an allocation profiling
          entry
graal.AllocationSiteSensitiveHeap = false                                [Boolean]
          A context sensitive heap means that each heap allocated object is
          modeled by using at least the allocation site.
graal.AllowVMInspection = false                                          [Boolean]
          Enables features that allow the VM to be inspected during runtime.
graal.AlwaysInlineIntrinsics = false                                     [Boolean]
          Unconditionally inline intrinsics
graal.AlwaysInlineVTableStubs = false                                    [Boolean]
graal.AnalysisContextSensitivity = "insens"                               [String]
          Controls the static analysis context sensitivity. Available values:
          insens (context insensitive analysis), allocsens (context insensitive
          analysis, context insensitive heap, allocation site sensitive heap),
          _1obj (1 object sensitive analysis with a context insensitive heap),
          _2obj1h (2 object sensitive with a 1 context sensitive heap)
graal.AnalysisSizeCutoff = 8                                             [Integer]
          The maximum size of type and method profiles returned by the static
          analysis. -1 indicates no limitation.
graal.BaseCodeSizeCostCoefficient = 1.0E-4                                [Double]
          The base coefficient used to compute code size cost.
graal.BaseTargetSpending = 120                                           [Integer]
          The base target spending used to estimate the inlining threshold; the
          higher, the likelier it is to inline.
graal.BenchmarkCountersDumpDynamic = true                                [Boolean]
          Dump dynamic counters
graal.BenchmarkCountersDumpStatic = false                                [Boolean]
          Dump static counters
graal.BenchmarkCountersFile = null                                        [String]
          File to which benchmark counters are dumped. A CSV format is used if
          the file ends with .csv otherwise a more human readable format is used.
          The fields in the CSV format are: category, group, name, value
graal.BenchmarkDynamicCounters = null                                     [String]
          Turn on the benchmark counters. The format of this option is:
          
            (err|out),start pattern,end pattern
            
          Start counting when the start pattern matches on the given stream and stop when the end pattern occurs.
          You can use "~" to match 1 or more digits.
          Examples:
          
            err, starting =====, PASSED in
            out,Iteration ~ (~s) begins:,Iteration ~ (~s) ends:
            
          The first pattern matches DaCapo output and the second matches SPECjvm2008 output.
          
          As a more detailed example, here are the options to use for getting statistics
          about allocations within the DaCapo pmd benchmark:
          
            -XX:JVMCICounterSize=<value> -XX:-JVMCICountersExcludeCompiler \
            -Dgraal.BenchmarkDynamicCounters="err, starting ====, PASSED in " \
            -Dgraal.ProfileAllocations=true
            
          The JVMCICounterSize value depends on the granularity of the profiling -
          10000 should be sufficient. Omit JVMCICountersExcludeCompiler to exclude
          counting allocations on the compiler threads.
          The counters can be further configured by the ProfileAllocationsContext option.
          
          We highly recommend the use of -Dgraal.AbortOnBenchmarkCounterOverflow=true to
          detect counter overflows eagerly.
graal.BlockZeroingLowLimit = 512                                         [Integer]
          Minimum amount of bytes when block zeroing used. (SPARC only)
graal.BootstrapInitializeOnly = false                                    [Boolean]
          Do not compile anything on bootstrap but just initialize the compiler.
graal.BootstrapTimeout = 15.0                                             [Double]
          Maximum time in minutes to spend bootstrapping (0 to disable this
          limit).
graal.BootstrapWatchDogCriticalRateRatio = 0.25                           [Double]
          Ratio of the maximum compilation rate below which the bootstrap
          compilation rate must not fall (0 or less disables monitoring).
graal.BreakChainedPhis = true                                            [Boolean]
          Break chained phis
graal.CAPCacheDir = ""                                                    [String]
          Directory where information generated by the CAnnotation Processor are
          cached.
graal.CCompilerOption = [Ljava.lang.String;@7f0bfcfe6ba8                [String[]]
          Provide custom C compiler option used for query code compilation.
graal.CCompilerPath = null                                                [String]
          Provide custom path to C compiler used for query code compilation and
          linking.
graal.CLibraryPath = [Ljava.lang.String;@7f0bfcfe6bb8                   [String[]]
          Search path for C libraries passed to the linker (list of
          comma-separated directories)
graal.CallGraphCompilerNodeLimit = 35000                                 [Integer]
          Controls the maximum number of compiler nodes that can appear in the
          call graph
graal.CallGraphSizeLimit = 1200                                          [Integer]
          Controls the maximum size of the call graph before ceasing inlining.
graal.CallGraphSizePenaltyCoefficient = 0.001                             [Double]
          Reduces the likelihood of exploring call graph subtrees that are large.
graal.CanOmitFrame = true                                                [Boolean]
graal.CanonicalGraphStringsCheckConstants = false                        [Boolean]
          Exclude virtual nodes when dumping canonical text for graphs.
graal.CanonicalGraphStringsExcludeVirtuals = true                        [Boolean]
          Exclude virtual nodes when dumping canonical text for graphs.
graal.CanonicalGraphStringsRemoveIdentities = true                       [Boolean]
          Attempts to remove object identity hashes when dumping canonical text
          for graphs.
graal.CheckRecurringCallbackOnNativeToJavaTransition = false             [Boolean]
          Test whether a thread's recurring callback is pending on each
          transition from native code to Java.
graal.Class = ""                                                          [String]
          Class containing the default entry point method. Optional if --shared
          is used.
graal.ClassInitialization = [Ljava.lang.String;@7f0bfcfc9ae0            [String[]]
          A comma-separated list of classes appended with their initialization
          strategy (':build_time', ':rerun', or ':run_time')
graal.ClearMetricsAfterBootstrap = false                                 [Boolean]
          Clear the debug metrics after bootstrap.
graal.CodeCacheCounters = false                                          [Boolean]
          Count accesses to the image and runtime code info table
graal.CodeInfoEncoderCounters = false                                    [Boolean]
          Statistics about code and deoptimization information
graal.CodeInfoIndexGranularity = 256                                     [Integer]
          The granularity of the index for looking up code metadata. Should be a
          power of 2. Larger values make the index smaller, but access slower.
graal.CompilationBailoutAsFailure = false                                [Boolean]
          Treat compilation bailouts like compilation failures.
graal.CompilationCountLimit = 0                                          [Integer]
          The number of compilations allowed for any method before the VM exits
          (a value of 0 means there is no limit).
graal.CompilationExpirationPeriod = 300                                  [Integer]
          Time limit in seconds before a compilation expires (0 to disable the
          limit). The compilation alarm will be implicitly disabled if assertions
          are enabled.
graal.CompilationFailureAction = Silent                                   [String]
          Specifies the action to take when compilation fails.
          The accepted values are:
              Silent - Print nothing to the console.
               Print - Print a stack trace to the console.
            Diagnose - Retry the compilation with extra diagnostics.
              ExitVM - Same as Diagnose except that the VM process exits after retrying.
graal.CompilationWatchDogStackTraceInterval = 60.0                        [Double]
          Interval in seconds between a watch dog reporting stack traces for long
          running compilations.
graal.CompilationWatchDogStartDelay = 0.0                                 [Double]
          Delay in seconds before watch dog monitoring a compilation (0 disables
          monitoring).
graal.CompileGraalWithC1Only = true                                      [Boolean]
          In tiered mode compile Graal and JVMCI using optimized first tier code.
graal.CompileInIsolates = false                                          [Boolean]
          Activate runtime compilation in separate isolates (enable support
          during image build with option SupportCompileInIsolates).
graal.CompilerBackend = "lir"                                             [String]
          Backend used by the compiler
graal.CompilerConfiguration = null                                        [String]
          Names the compiler configuration to use. If omitted, the compiler
          configuration with the highest auto-selection priority is used. To see
          the set of available configurations, supply the value 'help' to this
          option.
graal.CompilerNodePenaltyCoefficient = 0.001                              [Double]
          Controls the likelihood of exploring subtrees that already have a lot
          of code during inlining.
graal.ConditionalElimination = true                                      [Boolean]
graal.ConditionalEliminationMaxIterations = 4                            [Integer]
graal.ConfigurationFileDirectories = null                               [String[]]
          Directories directly containing configuration files for dynamic
          features at runtime.
graal.ConfigurationResourceRoots = null                                 [String[]]
          Resource path above configuration resources for dynamic features at
          runtime.
graal.Count = null                                                        [String]
          Pattern for specifying scopes in which counters are enabled. See the
          Dump option for the pattern syntax. An empty value enables all counters
          unconditionally.
graal.CountWriteBarriers = false                                         [Boolean]
          Instrument write barriers with counters
graal.Counters = null                                                     [String]
          Comma separated names of counters that are enabled irrespective of the
          value for Count option. An empty value enables all counters
          unconditionally.
graal.CrashAt = null                                                      [String]
          Pattern for method(s) that will trigger an exception when compiled.
          This option exists to test handling compilation crashes gracefully. See
          the MethodFilter option for the pattern syntax. A ':Bailout' suffix
          will raise a bailout exception and a ':PermanentBailout' suffix will
          raise a permanent bailout exception.
graal.CustomLLC = ""                                                      [String]
          Path to a custom llc binary for LLVM compilation
graal.CutoffCodeSizePenaltyCoefficient = 1.0E-5                           [Double]
          Controls the likelihood of further exploring subtrees with a lot of
          code during inlining.
graal.Debug = 0                                                          [Integer]
          Control debug information output: 0 - no debuginfo, 1 - AOT code
          debuginfo, 2 - AOT and runtime code debuginfo.
graal.DebugLoopInversion = false                                         [Boolean]
          Debug the loop inversion transformation.
graal.DebugStubsAndSnippets = false                                      [Boolean]
          Enable debug output for stub code generation and snippet preparation.
graal.DeleteLocalSymbols = true                                          [Boolean]
          Use linker option to remove all local symbols from image.
graal.DeoptALot = false                                                  [Boolean]
graal.DeoptAfterOSR = true                                               [Boolean]
          Deoptimize OSR compiled code when the OSR entry loop is finished if
          there is no mature profile available for the rest of the method.
graal.DeoptimizeAll = false                                              [Boolean]
          Compiles all methods as deoptimization targets for testing
graal.DeoptsToDisableOptimisticOptimization = 40                         [Integer]
graal.DetailedAsserts = false                                            [Boolean]
          Enable expensive assertions if normal assertions (i.e. -ea or -esa) are
          enabled.
graal.DivertParameterReturningMethod = true                              [Boolean]
          Analysis: Detect methods that return one of their parameters and
          hardwire the parameter straight to the return.
graal.DominatorUsageTreeMaxDepth = 16                                    [Integer]
graal.Dump = null                                                         [String]
          Filter pattern for specifying scopes in which dumping is enabled.
          
          A filter is a list of comma-separated terms of the form:
           
            <pattern>[:<level>]
           
          If <pattern> contains a "*" or "?" character, it is interpreted as a glob pattern.
          Otherwise, it is interpreted as a substring. If <pattern> is empty, it
          matches every scope. If :<level> is omitted, it defaults to 1. The term
          ~<pattern> is a shorthand for <pattern>:0 to disable a debug facility for a pattern.
          
          The default log level is 0 (disabled). Terms with an empty pattern set
          the default log level to the specified value. The last
          matching term with a non-empty pattern selects the level specified. If
          no term matches, the log level is the default level. A filter with no
          terms matches every scope with a log level of 1.
          
          Examples of debug filters:
          --------- 
            (empty string)
          
            Matches any scope with level 1.
          --------- 
            :1
          
            Matches any scope with level 1.
          --------- 
            *
          
            Matches any scope with level 1.
          --------- 
            CodeGen,CodeInstall
          
            Matches scopes containing "CodeGen" or "CodeInstall", both with level 1.
          --------- 
            CodeGen:2,CodeInstall:1
          
            Matches scopes containing "CodeGen" with level 2, or "CodeInstall" with level 1.
          ---------
            Outer:2,Inner:0}
          
            Matches scopes containing "Outer" with log level 2, or "Inner" with log level 0. If the scope
            name contains both patterns then the log level will be 0. This is useful for silencing subscopes.
          ---------
            :1,Dead:2
          
            Matches scopes containing "Dead" with level 2, and all other scopes with level 1.
          --------- 
            Dead:0,:1
          
            Matches all scopes with level 1, except those containing "Dead".   Note that the location of
            the :1 doesn't matter since it's specifying the default log level so it's the same as
            specifying :1,Dead:0.
          --------- 
            Code*
          
            Matches scopes starting with "Code" with level 1.
          --------- 
            Code,~Dead
          
            Matches scopes containing "Code" but not "Dead", with level 1.
graal.DumpLLVMStackMap = null                                             [String]
          Dump contents of the generated stackmap to the specified file
graal.DumpOnError = false                                                [Boolean]
          Send compiler IR to dump handlers on error.
graal.DumpOnPhaseChange = null                                            [String]
          Dump a before and after graph if the named phase changes the
          graph.%nThe argument is substring matched against the simple name of
          the phase class
graal.DumpPath = "graal_dumps"                                            [String]
          The directory where various Graal dump files are written.
graal.DumpingErrorsAreFatal = false                                      [Boolean]
          Treat any exceptions during dumping as fatal.
graal.DuplicateALot = false                                              [Boolean]
          Perform Duplications as long as there is any sane improvement.
graal.DuplicationBudgetFactor = 0.15                                      [Double]
          Percentage in node cost graph size for the duplication budget. Computed
          relative to the methods code size.
graal.DuplicationBudgetFactorLate = 0.5                                   [Double]
          Percentage in node cost graph size for the late duplication budget.
          Computed relative to the methods code size.
graal.DuplicationCostReductionFactor = 2                                 [Integer]
graal.DuplicationMinBranchFrequency = 0.66                                [Double]
          Ignore low frequency branches when during duplication.
graal.DynamicCountersPrintGroupSeparator = true                          [Boolean]
          Use grouping separators for number printing
graal.DynamicProxyConfigurationFiles = null                             [String[]]
          One or several (comma-separated) paths to JSON files that specify lists
          of interfaces that define Java proxy classes.
          The structure is an array of arrays of fully qualified interface names.
          
          Example:
          
              [
                  ["java.lang.AutoCloseable", "java.util.Comparator"],
                  ["java.util.Comparator"],
                  ["java.util.List"]
              ]
graal.DynamicProxyConfigurationResources = null                         [String[]]
          Resources describing program elements to be made available for
          reflection (see ProxyConfigurationFiles).
graal.EagerSnippets := true                                              [Boolean]
          Eagerly construct extra snippet info.
graal.EmitStringEncodingSubstitutions = true                             [Boolean]
          Emit substitutions for UTF16 and latin1 compression
graal.EnableAllSecurityServices = false                                  [Boolean]
          Add all security service classes to the generated image.
graal.EnableURLProtocols = null                                         [String[]]
          List of comma separated URL protocols to enable.
graal.EnforceMaxRuntimeCompileMethods = false                            [Boolean]
          Enforce checking of maximum number of methods allowed for runtime
          compilation. Useful for checking in the gate that the number of methods
          does not go up without a good reason.
graal.EntryPointNamePrefix = ""                                           [String]
          Prefix that is added to the names of entry point methods.
graal.EscapeAnalysisIterations = 2                                       [Integer]
graal.EscapeAnalysisLoopCutoff = 20                                      [Integer]
graal.EscapeAnalyzeOnly = null                                            [String]
graal.ExactFullUnrollMaxNodes = 800                                      [Integer]
graal.ExactPartialUnrollMaxNodes = 200                                   [Integer]
graal.ExcludeFunctionFromDuplication = null                               [String]
          Exclude compilations that MethodFilter.match this string from the
          duplication optimization.
graal.ExitAfterCAPCache = false                                          [Boolean]
          Exit image generation after C Annotation Processor Cache creation.
graal.ExitVMOnException = false                                          [Boolean]
          Alias for CompilationFailureAction=ExitVM.
graal.ExpandAllProximityBonus = 6.0                                       [Double]
          The decrease in call graph expansion pressure when there are few call
          nodes left to explore.
graal.ExpandAllProximityBonusInertia = 2.0                                [Double]
          The inertia at which the expand-all proximity bonus decreases with the
          number of yet unexpanded nodes.
graal.ExpansionInertiaBaseValue = 550                                    [Integer]
          The slowness at which the expansion pressure grows with code size; the
          higher it is, the slower the pressure growth.
graal.ExpansionInertiaInvokeBonus = 14                                   [Integer]
          The extra slowness at which the expansion pressure grows with the code
          size, for each extra invoke node.
graal.ExpansionInertiaMax = 2000                                         [Integer]
          The max slowness at which the expansion pressure grows with the code
          size.
graal.ExtendedAsserts = false                                            [Boolean]
          Enable extended asserts which slow down analysis.
graal.FailedLoopExplosionIsFatal = false                                 [Boolean]
          Do not bail out but throw an exception on failed loop explosion.
graal.FallbackExecutorClasspath = null                                    [String]
          Internal option used to specify Classpath for FallbackExecutor.
graal.FallbackExecutorJavaArg = null                                    [String[]]
          Internal option used to specify java arguments for FallbackExecutor.
graal.FallbackExecutorMainClass = null                                    [String]
          Internal option used to specify MainClass for FallbackExecutor.
graal.FallbackExecutorRuntimeJavaArg = [Ljava.lang.String;@7f0bfcfe71b0 [String[]]
          Internal option used to specify runtime java arguments for
          FallbackExecutor.
graal.FallbackExecutorSystemProperty = null                             [String[]]
          Internal option used to specify system properties for FallbackExecutor.
graal.FallbackThreshold = 5                                              [Integer]
          Define when fallback-image generation should be used.
graal.FoldSecurityManagerGetter = true                                   [Boolean]
          Fold SecurityManager getter.
graal.ForceDumpGraphsBeforeCompilation = false                           [Boolean]
          Force-dump graphs before compilation
graal.FullUnroll = true                                                  [Boolean]
graal.FullUnrollAsPEACleanup = true                                      [Boolean]
          Perform full unrolling as a Partial Escape Analysis Cleanup
graal.FullUnrollConstantCompareBoost = 15                                [Integer]
graal.FullUnrollMaxIterations = 600                                      [Integer]
graal.FullUnrollMaxNodes = 400                                           [Integer]
graal.GCDebugStartCycle = -1                                             [Integer]
          Start tracing compiled GC barriers after N garbage collections
          (disabled if N <= 0).
graal.GCHistory = 1                                                      [Integer]
          How much history to maintain about garbage collections.
graal.GatherSafepointStatistics = false                                  [Boolean]
          Gather statistics about each safepoint.
graal.GenLoopSafepoints = true                                           [Boolean]
graal.GenSafepoints = true                                               [Boolean]
graal.GeneratePIC = false                                                [Boolean]
          Generate position independent code
graal.GenericDynamicCounters = false                                     [Boolean]
          Turn on the benchmark counters, and displays the results on VM shutdown
graal.GraalArithmeticStubs = true                                        [Boolean]
          Use Graal arithmetic stubs instead of HotSpot stubs where possible
graal.GraalCompileOnly = null                                             [String]
          A filter applied to a method the VM has selected for compilation by
          Graal. A method not matching the filter is redirected to a lower tier
          compiler. The filter format is the same as for the MethodFilter option.
graal.GraphCompressionThreshold = 70                                     [Integer]
          Graal graph compression is performed when percent of live nodes falls
          below this value
graal.GreyToBlackObjRefDemographics = false                              [Boolean]
          Develop demographics of the object references visited.
graal.GreyToBlackObjectVisitorDiagnosticHistory = 0                      [Integer]
          Keep history of GreyToBlackObjectVisits. 0 implies no history is kept.
graal.GuardPriorities = true                                             [Boolean]
graal.HeapChunkHeaderPadding = 0                                         [Integer]
          Number of bytes at the beginning of each heap chunk that are not used
          for payload data, i.e., can be freely used as metadata by the heap
          chunk provider.
graal.HeapVerificationFailureIsFatal = true                              [Boolean]
          Verify the heap before and after each collection.
graal.HideSubstitutionStates = false                                     [Boolean]
          When creating info points hide the methods of the substitutions.
graal.HotSpotPrintInlining = false                                       [Boolean]
          Print inlining optimizations
graal.HybridStaticContext = false                                        [Boolean]
          Enable hybrid context for static methods, i.e. uses invocation site as
          context for static methods.
graal.IgnoreBadDuplications = true                                       [Boolean]
          Ignore duplications with a bad benefit cost relation.
graal.ImageObjectTreeExpandRoots = ""                                     [String]
          Override the default suppression of specified roots. See: REPORTS.md.
graal.ImageObjectTreeExpandTypes = ""                                     [String]
          Override the default suppression of specified types. See: REPORTS.md.
graal.ImageObjectTreeSuppressRoots = ""                                   [String]
          Suppress the expansion of specified roots. See: REPORTS.md.
graal.ImageObjectTreeSuppressTypes = ""                                   [String]
          Suppress the expansion of specified types. See: REPORTS.md.
graal.ImmutableCode = false                                              [Boolean]
          Try to avoid emitting code where patching is required
graal.IncludeAllTimeZones = false                                        [Boolean]
          When true, all time zones will be pre-initialized in the image.
graal.IncludeLLVMDebugInfo = 0                                           [Integer]
          Include debugging info in the generated image (for LLVM backend).
graal.IncludeNodeSourcePositions = false                                 [Boolean]
          Track NodeSourcePositions during runtime-compilation
graal.IncludeResourceBundles = null                                     [String[]]
          Comma separated list of bundles to be included into the image.
graal.InitialCollectionPolicy = "com.oracle.svm.core.genscavenge.CollectionPolicy$ByTime" [String]
          What is the initial collection policy?
graal.Inline = true                                                      [Boolean]
          Enable inlining
graal.InlineAllBonus = 1.0                                                [Double]
          The bonus applied to call nodes that can be fully inlined.
graal.InlineDuringParsing = true                                         [Boolean]
          Inlines trivial methods during bytecode parsing.
graal.InlineDuringParsingMaxDepth = 10                                   [Integer]
          Maximum depth when inlining during bytecode parsing.
graal.InlineEverything = false                                           [Boolean]
graal.InlineIntrinsicsDuringParsing = true                               [Boolean]
          Inlines intrinsic methods during bytecode parsing.
graal.InlineMegamorphicCalls = true                                      [Boolean]
          Inline calls with megamorphic type profile (i.e., not all types could
          be recorded).
graal.InlineMonomorphicCalls = true                                      [Boolean]
          Inline calls with monomorphic type profile.
graal.InlinePartialIntrinsicExitDuringParsing = true                     [Boolean]
          Inlines partial intrinsic exits during bytecode parsing when possible.
          A partial intrinsic exit is a call within an intrinsic to the method
          being intrinsified and denotes semantics of the original method that
          the intrinsic does not support.
graal.InlinePolymorphicCalls = true                                      [Boolean]
          Inline calls with polymorphic type profile.
graal.InlineVTableStubs = true                                           [Boolean]
graal.InlinedCompilerNodeLimit = 20000                                   [Integer]
          Controls the maximum number of compiler nodes that can be inlined into
          the compiled method.
graal.InliningCoefficient = 0.02                                          [Double]
          The coefficient used to compute the inlining threshold; the higher, the
          more to inline.
graal.InliningDepthError = 1000                                          [Integer]
          Maximum inlining depth during partial evaluation before reporting an
          infinite recursion
graal.InspectGraphs = false                                              [Boolean]
          Inspect analysis graphs.
graal.InspectServerContentPath = "inspect"                                [String]
          Path to the contents of the Inspect web server.
graal.InstallSegfaultHandler = null                                      [Boolean]
          Install segfault handler that prints register contents and full Java
          stacktrace. Default: enabled for an executable, disabled for a shared
          library.
graal.InterceptBailout = false                                           [Boolean]
          Intercept also bailout exceptions
graal.InterfacesForJNR = null                                           [String[]]
          Register JNR FFI interfaces as comma-separated list of fully qualified
          class names)
graal.Intrinsify = true                                                  [Boolean]
          Use compiler intrinsifications.
graal.JNI = true                                                         [Boolean]
          Enable Java Native Interface (JNI) support.
graal.JNIConfigurationFiles = null                                      [String[]]
          Files describing program elements to be made accessible via JNI (for
          syntax, see ReflectionConfigurationFiles)
graal.JNIConfigurationResources = null                                  [String[]]
          Resources describing program elements to be made accessible via JNI
          (see JNIConfigurationFiles).
graal.JNIVerboseLookupErrors = false                                     [Boolean]
          Report information about known JNI elements when lookup fails
graal.LIRDynMoveProfileMethod = false                                    [Boolean]
          Enable dynamic move profiling per method.
graal.LIROptConstantLoadOptimization = true                              [Boolean]
          Enable constant load optimization.
graal.LIROptControlFlowOptimizer = true                                  [Boolean]
graal.LIROptEdgeMoveOptimizer = true                                     [Boolean]
graal.LIROptLSRAEliminateSpillMoves = true                               [Boolean]
          Enable spill move elimination.
graal.LIROptLSRAOptimizeSpillPosition = true                             [Boolean]
          Enable spill position optimization
graal.LIROptLSStackSlotAllocator = true                                  [Boolean]
          Use linear scan stack slot allocation.
graal.LIROptNullCheckOptimizer = true                                    [Boolean]
graal.LIROptRedundantMoveElimination = true                              [Boolean]
graal.LIROptStackMoveOptimizer = true                                    [Boolean]
graal.LIROptimization = true                                             [Boolean]
          Enable LIR level optimiztations.
graal.LIRProfileMethods = false                                          [Boolean]
          Enables profiling of methods.
graal.LIRProfileMoves = false                                            [Boolean]
          Enables profiling of move types on LIR level. Move types are for
          example stores (register to stack), constant loads (constant to
          register) or copies (register to register).
graal.LLVMBatchesPerThread = 1                                           [Integer]
          How many batches per thread should be used for LLVM compilation. 0
          means a single batch, -1 means all functions separately
graal.LSRAOptSplitOnly = false                                           [Boolean]
          LSRA optimization: Only split but do not reassign
graal.LSRAOptimization = false                                           [Boolean]
          Enable LSRA optimization
graal.LargeArrayThreshold = 0                                               [Long]
          How many bytes is enough to allocate an unaligned chunk for an array? 0
          implies (AlignedHeapChunkSize / 8).
graal.LargeChildrenCountPenaltyCoefficient = 0.005                        [Double]
          Reduces the likelihood of exploring call graphs that have a lot of
          children below the root.
graal.LateMembars = true                                                 [Boolean]
          Do not include membars for volatile accesses until the end of
          optimizations.
graal.LimitInlinedInvokes = 5.0                                           [Double]
graal.LimitObjectArrayLength = false                                     [Boolean]
          Enable a limit for the number of objects recorded for each type of a
          type state before disabling heap sensitivity for that type. The
          analysis must be heap sensitive.
graal.LinkerRPath = null                                                [String[]]
          Path passed to the linker as the -rpath (list of comma-separated
          directories)
graal.ListMetrics = false                                                [Boolean]
          Lists on the console at VM shutdown the metric names available to the
          Timers, Counters and MemUseTrackers options. Note that this only lists
          the metrics that were initialized during the VM execution and so will
          not include metrics for compiler code that is not executed.
graal.LoadExceptionObjectInVM = false                                    [Boolean]
          Use a VM runtime call to load and clear the exception object from the
          thread at the start of a compiled exception handler.
graal.Log = null                                                          [String]
          Pattern for specifying scopes in which logging is enabled. See the Dump
          option for the pattern syntax.
graal.LogFile = null                                                      [String]
          File to which logging is sent. A %p in the name will be replaced with a
          string identifying the process, usually the process id and %t will be
          replaced by System.currentTimeMillis(). Using %o as filename sends
          logging to System.out whereas %e sends logging to System.err.
graal.LogVerbose = false                                                 [Boolean]
          Enable more verbose log output when available
graal.LoopHeaderAlignment = 16                                           [Integer]
          Alignment in bytes for loop header blocks.
graal.LoopInversion = false                                              [Boolean]
          Convert loops into their zero trip form.
graal.LoopMaxUnswitch = 3                                                [Integer]
graal.LoopPeeling = true                                                 [Boolean]
graal.LoopUnswitch = true                                                [Boolean]
graal.LoopUnswitchFrequencyBoost = 10.0                                   [Double]
graal.LoopUnswitchMaxIncrease = 500                                      [Integer]
graal.LoopUnswitchTrivial = 10                                           [Integer]
graal.MatchExpressions = true                                            [Boolean]
          Allow backend to match complex expressions.
graal.MaxCFGRecomputations = 12                                          [Integer]
graal.MaxCallingContextDepth = 0                                         [Integer]
          The maximum length of the methods context chains.
graal.MaxCallingContextWidth = 0                                         [Integer]
          The maximum number of contexts to record for a method. It only affects
          the analysis when the max and min calling context depth are different.
graal.MaxCompilationProblemsPerAction = 2                                [Integer]
          The maximum number of compilation failures to handle with the action
          specified by CompilationFailureAction before changing to a less verbose
          action. This does not apply to the ExitVM action.
graal.MaxConstantObjectsPerType = 100                                    [Integer]
          The maximum number of constant objects recorded for each type before
          merging the constants into one unique constant object per type. The
          analysis must be heap sensitive. It has a minimum value of 1.
graal.MaxGraphSizeNodeCost = 100000                                      [Integer]
          Maximum node cost graph size for duplication. If a graph is bigger
          duplication will stop.
graal.MaxHeapContextDepth = 0                                            [Integer]
          The maximum length of the context used to model a heap object in
          addition to the allocation site; used only when ContextSensitiveHeap is
          enabled.
graal.MaxHeapContextWidth = 0                                            [Integer]
          The maximum number of contexts to record for a heap object. It only
          affects the analysis when the max and min calling context depth are
          different.
graal.MaxInvokesInTrivialMethod = 1                                      [Integer]
          Maximum number of invokes in a method so that it is considered trivial
          (for testing only).
graal.MaxNodesInTrivialLeafMethod = 40                                   [Integer]
          Maximum number of nodes in a method so that it is considered trivial,
          if it does not have any invokes.
graal.MaxNodesInTrivialMethod = 20                                       [Integer]
          Maximum number of nodes in a method so that it is considered trivial.
graal.MaxObjectSetSize = 100                                             [Integer]
          The maximum number of objects recorded for each type of a type state
          before disabling heap sensitivity for that type. The analysis must be
          heap sensitive. It has a minimum value of 1.
graal.MaxPriorityInliningPeelingIterations = 10                          [Integer]
          Max number of precise inlining peeling iterations.
graal.MaxRuntimeCompileMethods = [Ljava.lang.Integer;@7f0bfcfca340     [Integer[]]
          Maximum number of methods allowed for runtime compilation.
graal.MaxSimulationIterations = 2                                        [Integer]
          Maximum simulation-duplication iterations of the duplication
          optimization per invocation.
graal.MaxSplitsPerNode = 32                                              [Integer]
graal.MaxTemplatesPerSnippet = 50                                        [Integer]
graal.MaxUnrolledObjectZeroingStores = 8                                 [Integer]
          Define the maximum number of stores for which the loop that zeroes out
          objects is unrolled.
graal.MaxVectorAlignmentUnroll = 4                                       [Integer]
          Maximum number of unrolled alignment instructions
graal.MaxVectorUnroll = 16                                               [Integer]
          Maximum length of linear-code vector operations
graal.MaximumDesiredSize = 20000                                         [Integer]
          Maximum desired size of the compiler graph in nodes.
graal.MaximumEscapeAnalysisArrayLength = 128                             [Integer]
          The maximum length of an array that will be escape analyzed.
graal.MaximumHeapSizePercent = 80                                        [Integer]
          The maximum heap size as percent of physical memory
graal.MaximumInliningSize = 300                                          [Integer]
          Inlining is explored up to this number of nodes in the graph for each
          call site.
graal.MaximumLoopExplosionCount = 10000                                  [Integer]
          Max number of loop explosions per method.
graal.MaximumRecursiveInlining = 5                                       [Integer]
          Maximum level of recursive inlining.
graal.MaximumYoungGenerationSizePercent = 10                             [Integer]
          The maximum size of the young generation as a percent of the maximum
          heap size
graal.MegamorphicInliningMinMethodProbability = 0.33                      [Double]
          Minimum probability for methods to be inlined for megamorphic type
          profiles.
graal.MemUseTrackers = null                                               [String]
          Comma separated names of memory usage trackers that are enabled
          irrespective of the value for TrackMemUse option. An empty value
          enables all memory usage trackers unconditionally.
graal.Method = "main"                                                     [String]
          Name of the main entry point method. Optional if --shared is used.
graal.MethodDupCounters = false                                          [Boolean]
graal.MethodDupOnly = ""                                                  [String]
graal.MethodDupPropagateAnchors = false                                  [Boolean]
graal.MethodFilter = null                                                 [String]
          Pattern for filtering debug scope output based on method context.
          The syntax for a pattern is:
          
            SourcePatterns = SourcePattern ["," SourcePatterns] .
            SourcePattern = [ Class "." ] method [ "(" [ Parameter { ";" Parameter } ] ")" ] .
            Parameter = Class | "int" | "long" | "float" | "double" | "short" | "char" | "boolean" .
            Class = { package "." } class .
           
          Glob pattern matching (*, ?) is allowed in all parts of the source pattern.
          
          Examples of method filters:
          --------- 
            visit(Argument;BlockScope)  
            
            Matches all methods named "visit", with the first parameter of
            type "Argument", and the second parameter of type "BlockScope".
            The packages of the parameter types are irrelevant.
          ---------
            arraycopy(Object;;;;)
           
            Matches all methods named "arraycopy", with the first parameter
            of type "Object", and four more parameters of any type. The
            packages of the parameter types are irrelevant.
          ---------    
            org.graalvm.compiler.core.graph.PostOrderNodeIterator.*
           
            Matches all methods in the class "org.graalvm.compiler.core.graph.PostOrderNodeIterator".
          ---------    
            *
           
            Matches all methods in all classes
          ---------
            org.graalvm.compiler.core.graph.*.visit
           
            Matches all methods named "visit" in classes in the package
            "org.graalvm.compiler.core.graph".
          ---------
            arraycopy,toString
           
            Matches all methods named "arraycopy" or "toString", meaning that ',' acts as an or operator.
graal.MethodFilterRootOnly = false                                       [Boolean]
          Only check MethodFilter against the root method in the context if true,
          otherwise check all methods
graal.MethodInlineBailoutLimit = 5000                                    [Integer]
          Per-compilation method inlining exploration limit before giving up (use
          0 to disable)
graal.MetricsFile = null                                                  [String]
          File to which metrics are dumped per compilation.
          A CSV format is used if the file ends with .csv otherwise a more
          human readable format is used. The fields in the CSV format are:
                     compilable - method being compiled
            compilable_identity - identity hash code of compilable
                 compilation_nr - where this compilation lies in the ordered
                                  sequence of all compilations identified by
                                  compilable_identity
                 compilation_id - runtime issued identifier for the compilation
                    metric_name - name of metric
                   metric_value - value of metric
graal.MetricsThreadFilter = null                                          [String]
          Only report metrics for threads whose name matches the regular
          expression.
graal.MinCallingContextDepth = 0                                         [Integer]
          The minimum length of the methods context chains.
graal.MinHeapContextDepth = 0                                            [Integer]
          The minimum length of the context used to model a heap object in
          addition to the allocation site; used only when ContextSensitiveHeap is
          enabled.
graal.MinimalBulkZeroingSize = 2048                                      [Integer]
          If applicable, use bulk zeroing instructions when the zeroing size in
          bytes exceeds this threshold.
graal.MinimalRegions = true                                              [Boolean]
          Try to reduce duplication code size to the minimal amount of code.
graal.MinimumPeelProbability = 0.35                                        [Float]
graal.MitigateSpeculativeExecutionAttacks = None                          [String]
          Select a strategy to mitigate speculative execution attacks (e.g.,
          SPECTRE).
          The accepted values are:
                            None - No mitigations are used in JIT compiled code.
                      AllTargets - All branches are protected against speculative attacks.
                                   This has a significant performance impact.
                    GuardTargets - Only branches that preserve Java memory safety are protected.
                                   This has less performance impact than AllTargets.
            NonDeoptGuardTargets - GuardTargets except that branches which deoptimize are not
                                   protected since they can not be executed repeatedly.
graal.MultiThreaded = true                                               [Boolean]
          Enable support for threads and and thread-local variables (disable for
          single-threaded implementation)
graal.NDCV = 0                                                           [Integer]
          Run level for NoDeadCodeVerifyHandler (0 = off, 1 = info, 2 = verbose,
          3 = fatal)
graal.Name = ""                                                           [String]
          Name of the output file to be generated
graal.NewCAPCache = false                                                [Boolean]
          Create a C Annotation Processor Cache. Will erase any previous cache at
          that same location.
graal.NodeCounters = false                                               [Boolean]
          Counts the number of instances of each node class.
graal.NonFatalIdenticalCompilationSnapshots = 20                         [Integer]
          Number of contiguous identical compiler thread stack traces allowed
          before the VM exits on the basis of a stuck compilation.
graal.OmitHotExceptionStacktrace = false                                 [Boolean]
graal.OptAssumptions = true                                              [Boolean]
graal.OptBulkAllocation = true                                           [Boolean]
graal.OptCompressedFrameStateValues = true                               [Boolean]
graal.OptConditionalMoves = true                                         [Boolean]
          Optimize simple if branches with conditional moves
graal.OptConvertDeoptsToGuards = true                                    [Boolean]
graal.OptDeDuplication = true                                            [Boolean]
graal.OptDeoptimizationGrouping = true                                   [Boolean]
graal.OptDevirtualizeInvokesOptimistically = true                        [Boolean]
graal.OptDuplication = true                                              [Boolean]
graal.OptEarlyReadElimination = true                                     [Boolean]
graal.OptEliminateGuards = true                                          [Boolean]
graal.OptEliminatePartiallyRedundantGuards = true                        [Boolean]
graal.OptExactArithmetic = true                                          [Boolean]
graal.OptFilterProfiledTypes = true                                      [Boolean]
graal.OptFloatingReads = true                                            [Boolean]
graal.OptGuardRangeGrouping = true                                       [Boolean]
graal.OptImplicitNullChecks = true                                       [Boolean]
graal.OptLateDuplication = false                                         [Boolean]
graal.OptLockElimination = true                                          [Boolean]
graal.OptLoopPhiStamps = true                                            [Boolean]
          Inject stamps on induction variables.
graal.OptLoopTransform = true                                            [Boolean]
graal.OptMethodDuplication = false                                       [Boolean]
graal.OptPullThroughPhi = true                                           [Boolean]
graal.OptReadElimination = true                                          [Boolean]
graal.OptScheduleOutOfLoops = true                                       [Boolean]
graal.OptSpeculativeGuardMovement = true                                 [Boolean]
graal.OptStringConcat = true                                             [Boolean]
          Optimize StringBuilder construction
graal.OptStringConcatDump = false                                        [Boolean]
          Dump graphs to help debug operation
graal.OptWriteBarrierElimination = true                                  [Boolean]
          Eliminate redundant write barriers.
graal.OptimisticAliasingAnalysis = true                                  [Boolean]
graal.Optimize = 2                                                       [Integer]
          Control native-image code optimizations: 0 - no optimizations, 1 -
          basic optimizations, 2 - aggressive optimizations.
graal.OptimizeLoopAccesses = true                                        [Boolean]
          Enable access node optimizations for loops
graal.PEAInliningHints = false                                           [Boolean]
graal.PGOInstrument = null                                                [String]
          Dump information for Profile Guided Optimizations (true or file name)
graal.ParseRuntimeOptions = true                                         [Boolean]
          Parse and consume standard options and system properties from the
          command line arguments when the VM is created.
graal.PartialEscapeAnalysis = true                                       [Boolean]
graal.PartialRedundancyElimination = true                                [Boolean]
          Enable partial redundancy elimination
graal.PartialUnroll = true                                               [Boolean]
graal.Path = "/b/b/e/main/vm-enterprise/svmbuild"                         [String]
          Directory of the image file to be generated
graal.PathDuplicationPhiCutoff = 20                                      [Integer]
graal.PeelALot = false                                                   [Boolean]
graal.PeelBackFoldFactor = 100                                           [Integer]
graal.PeelForwardFoldFactor = 20                                         [Integer]
graal.PeelPotentialFoldFactor = 60                                       [Integer]
graal.PercentTimeInIncrementalCollection = 50                            [Integer]
          Percentage of time that should be spent in young generation
          collections.
graal.PerfDataMemorySize = 32768                                         [Integer]
          Size of performance data memory region. Will be rounded up to a
          multiple of the native os page size.
graal.PerfDataSamplingInterval = 200                                     [Integer]
          Jvmstat instrumentation sampling interval (in milliseconds)
graal.PerfMaxStringConstLength = 1024                                    [Integer]
          Maximum PerfStringConstant string length before truncation
graal.PreserveFramePointer = false                                       [Boolean]
          Saves stack base pointer on the stack on method entry.
graal.PrintAnalysisCallTree = false                                      [Boolean]
          Print analysis call tree, a breadth-first tree reduction of the call
          graph.
graal.PrintBackendCFG = true                                             [Boolean]
          Enable dumping LIR, register allocation and code generation info to the
          C1Visualizer.
graal.PrintCFG = false                                                   [Boolean]
          Enable dumping to the C1Visualizer. Enabling this option implies
          PrintBackendCFG.
graal.PrintCanonicalGraphStringFlavor = 0                                [Integer]
          Choose format used when dumping canonical text for graphs: 0 gives a
          scheduled graph (better for spotting changes involving the schedule)
          while 1 gives a CFG containing expressions rooted at fixed nodes
          (better for spotting small structure differences)
graal.PrintCanonicalGraphStrings = false                                 [Boolean]
          Enable dumping canonical text from for graphs.
graal.PrintClassInitialization = false                                   [Boolean]
          Prints class initialization info for all classes detected by analysis.
graal.PrintCompilation = false                                           [Boolean]
          Print an informational line to the console for each completed
          compilation.
graal.PrintDetailedAllocationProfiling = true                            [Boolean]
          Print detailed information for each allocation site
graal.PrintFlags = null                                                   [String]
          Show available options based on comma-separated option-types (allowed
          categories: User, Expert, Debug).
graal.PrintGC = false                                                    [Boolean]
          Print summary GC information after each collection
graal.PrintGCSummary = false                                             [Boolean]
          Print summary GC information after main completion
graal.PrintGCTimeStamps = false                                          [Boolean]
          Print a time stamp at each collection, if +PrintGC or +VerboseGC.
graal.PrintGCTimes = false                                               [Boolean]
          Print the time for each of the phases of each collection, if
          +VerboseGC.
graal.PrintGraph = File                                                   [String]
          Where IdealGraphVisualizer graph dumps triggered by Dump or DumpOnError
          should be written.
          The accepted values are:
                File - Dump IGV graphs to the local file system (see DumpPath).
             Network - Dump IGV graphs to the network destination specified by PrintGraphHost and PrintGraphPort.
                       If a network connection cannot be opened, dumping falls back to file dumping. 
             Disable - Do not dump IGV graphs.
graal.PrintGraphFile = true                                              [Boolean]
          Setting to true sets PrintGraph=file, setting to false sets
          PrintGraph=network
graal.PrintGraphHost = "127.0.0.1"                                        [String]
          Host part of the address to which graphs are dumped.
graal.PrintGraphPort = 4445                                              [Integer]
          Port part of the address to which graphs are dumped in binary format.
graal.PrintGraphWithSchedule = false                                     [Boolean]
          Schedule graphs as they are dumped.
graal.PrintHeapShape = false                                             [Boolean]
          Print the shape of the heap before and after each collection, if
          +VerboseGC.
graal.PrintIRWithLIR = false                                             [Boolean]
          Print HIR along side LIR as the latter is generated
graal.PrintImageObjectTree = false                                       [Boolean]
          Print boot image object hierarchy.
graal.PrintJNIMethods = false                                            [Boolean]
          Print JNI methods added to generated image
graal.PrintLIRWithAssembly = false                                       [Boolean]
          Include the LIR as comments with the final assembly.
graal.PrintProfilingInformation = false                                  [Boolean]
          Print profiling information when parsing a method's bytecode
graal.PrintRuntimeCompileMethods = false                                 [Boolean]
          Print call tree of methods available for runtime compilation
graal.PrintStaticTruffleBoundaries = false                               [Boolean]
          Print truffle boundaries found during the analysis
graal.PrintSynchronizedAnalysis = false                                  [Boolean]
          Print types used for Java synchronization.
graal.PrintTruffleExpansionHistogram = false                             [Boolean]
          Prints a histogram of all expanded Java methods.
graal.PrintTruffleTrees = true                                           [Boolean]
          Enable dumping Truffle ASTs to the IdealGraphVisualizer.
graal.PriorityInliningPolicy = ""                                         [String]
          The policy to use, must be empty for automatic resolution.
graal.ProbabilisticProfiling = true                                      [Boolean]
          Control probabilistic profiling on AMD64
graal.ProfileAllocations = false                                         [Boolean]
          Enable profiling of allocation sites.
graal.ProfileAllocationsContext = AllocatingMethod                        [String]
          Control the naming and granularity of the counters when using
          ProfileAllocations.
          The accepted values are:
                  AllocatingMethod - a counter per method
                   InstanceOrArray - one counter for all instance allocations and
                                     one counter for all array allocations 
                     AllocatedType - one counter per allocated type
            AllocatedTypesInMethod - one counter per allocated type, per method
           
graal.ProfileAnalysisOperations = false                                  [Boolean]
          Track the progress of the static analysis.
graal.ProfileBackedges = true                                            [Boolean]
          Emit profiling of backedges
graal.ProfileCompiledMethods = false                                     [Boolean]
graal.ProfileConstantObjects = false                                     [Boolean]
          Track the creation of constant objects.
graal.ProfileDeoptimization = false                                      [Boolean]
          Print logging information during object file writing
graal.ProfileInvokes = true                                              [Boolean]
          Emit profiling of invokes
graal.ProfileLockElimination = false                                     [Boolean]
graal.ProfileMonitors = false                                            [Boolean]
          Enable profiling of monitor operations.
graal.ProfileSimpleMethods = true                                        [Boolean]
          Profile simple methods
graal.ProfileTypeSwitches = false                                        [Boolean]
          Turn on typeswitch profiling. This tracks the stability of typeswitches
          after compilation.
graal.ProfilesDumpFile = "default.iprof"                                  [String]
          Value should point to a profile dump file.
graal.PruneLargeDominatorUsageTrees = true                               [Boolean]
graal.PullThroughPhiBudget = 4096.0                                       [Double]
graal.RawConditionalElimination = true                                   [Boolean]
graal.ReadEliminationMaxLoopVisits = 5                                   [Integer]
graal.ReassociateInvariants = true                                       [Boolean]
graal.ReduceDCE = true                                                   [Boolean]
          Disable optional dead code eliminations
graal.ReflectionConfigurationFiles = null                               [String[]]
          One or several (comma-separated) paths to JSON files that specify which
          program elements should be made available via reflection.
          The JSON object schema is:
          
              {
                String name; // fully qualified class name
                boolean allDeclaredConstructors; // include all declared constructors, see Class.getDeclaredConstructors()
                boolean allPublicConstructors;   // include all public constructors, see Class.getConstructors()
                boolean allDeclaredMethods; // include all declared methods, see Class.getDeclaredMethods()
                boolean allPublicMethods;   // include all public methods, see Class.getMethods()
                boolean allDeclaredFields;  // include all declared fields, see Class.getDeclaredFields()
                boolean allPublicFields;    // include all public fields, see Class.getFields()
                {
                  String name; // method name
                  String[] parameterTypes; // parameter types (optional, use if ambiguous)
                }[] methods;
                {
                  String name; // field name
                }[] fields;
              }[];
          
          Example:
          
          	[
          	  {
          	    "name" : "java.lang.Class",
          	    "allDeclaredConstructors" : "true",
          	    "allPublicConstructors" : "true",
          	    "allDeclaredMethods" : "true",
          	    "allPublicMethods" : "true"
          	  },
          	  {
          	    "name" : "java.lang.String",
          	    "fields" : [
          	      { "name" : "value" },
          	      { "name" : "hash" }
          	    ],
          	    "methods" : [
          	      { "name" : "<init>", "parameterTypes" : [] },
          	      { "name" : "<init>", "parameterTypes" : ["char[]"] },
          	      { "name" : "charAt" },
          	      { "name" : "format", "parameterTypes" : ["java.lang.String", "java.lang.Object[]"] },
          	    ]
          	  },
                {
                  "name" : "java.lang.String$CaseInsensitiveComparator",
                  "methods" : [
                    { "name" : "compare" }
                  ]
                }
          	]
graal.ReflectionConfigurationResources = null                           [String[]]
          Resources describing program elements to be made available for
          reflection (see ReflectionConfigurationFiles).
graal.RegisterPressure = null                                             [String]
          Comma separated list of registers that register allocation is limited
          to.
graal.RelativeBenefitInliningCoefficient = 0.005                          [Double]
          The coefficient used to compute the inlining threshold; the higher, the
          hard to inline.
graal.RemoveNeverExecutedCode = true                                     [Boolean]
graal.RemoveUnusedSymbols = false                                        [Boolean]
          Use linker option to prevent unreferenced symbols in image.
graal.ReplaceInputsWithConstantsBasedOnStamps = true                     [Boolean]
graal.ReportAnalysisForbiddenType = [Ljava.lang.String;@7f0bfcfe6bc8    [String[]]
          Report error if <typename>[:<UsageKind>{,<UsageKind>}] is discovered
          during analysis (valid values for UsageKind: InHeap, Allocated,
          InTypeCheck).
graal.ReportAnalysisStatistics = false                                   [Boolean]
          Report analysis statistics.
graal.ResourceConfigurationFiles = [Ljava.lang.String;@7f0bfcfd5e70     [String[]]
          Files describing Java resources to be included in the image.
graal.ResourceConfigurationResources = [Ljava.lang.String;@7f0bfcfd5e80 [String[]]
          Resources describing Java resources to be included in the image.
graal.RuntimeAssertions = false                                          [Boolean]
          Enable or disable Java assert statements at run time
graal.RuntimeAssertionsFilter = null                                    [String[]]
          Only use Java assert statements for classes that are matching the
          comma-separated list of package prefixes.
graal.RuntimeDebugInfo = false                                           [Boolean]
          Provide debuginfo for runtime-compiled code.
graal.RuntimeSourceDestDir = null                                         [String]
          Directory where Java source-files will be placed for the debugger
graal.SafepointPromptnessFailureNanos = 0                                   [Long]
          Exit the VM if I can not come to a safepoint in this many nanoseconds.
          0 implies forever.
graal.SafepointPromptnessWarningNanos = 0                                   [Long]
          Print a warning if I can not come to a safepoint in this many
          nanoseconds. 0 implies forever.
graal.ScanObjectsParallel = true                                         [Boolean]
          Object scanning in parallel
graal.ScheduledDuplicationSimulation = false                             [Boolean]
          Simulation can either only process fixed nodes or schedule the graph
          and also process floating nodes.
graal.SharedLibrary = false                                              [Boolean]
          Build shared library
graal.ShowConfiguration = none                                            [String]
          Writes to the VM log information about the compiler configuration
          selected.
graal.ShowDumpFiles = false                                              [Boolean]
          Print the name of each dump file path as it's created.
graal.ShowSubstitutionSourceInfo = false                                 [Boolean]
          Controls whether the source position information of snippets and method
          substitutions are exposed to HotSpot. Can be useful when profiling to
          get more precise position information.
graal.SimpleFastInflatedLocking = true                                   [Boolean]
          Handle simple cases for inflated monitors in the fast-path.
graal.SimpleMethodCalls = 1                                              [Integer]
          Maximum number of calls in a simple method
graal.SimpleMethodGraphSize = 256                                        [Integer]
          Maximum number of nodes in a graph for a simple method
graal.SimpleMethodIndirectCalls = 0                                      [Integer]
          Maximum number of indirect calls in a simple moethod
graal.SimulationStopAtControlFlow = true                                 [Boolean]
          Determines if simulation traversal should stop at control flow
          boundaries that cannot be duplicated.
graal.SmallCompiledLowLevelGraphSize = 330                               [Integer]
          If the previous low-level graph size of the method exceeds the
          threshold, it is not inlined.
graal.SmallRootIrPenaltyCoefficient = 0.02                                [Double]
          Reduces the likelihood of exploring call graphs with IR size much
          larger than the root.
graal.SnippetCounters = false                                            [Boolean]
          Enable counters for various paths in snippets.
graal.SourceLevelDebug = false                                           [Boolean]
          Preserve the local variable information for every Java source line to
          allow line-by-line stepping in the debugger. Allow the lookup of
          Java-level method information, e.g., in stack traces.
graal.SourceLevelDebugFilter = null                                     [String[]]
          Constrain debug info generation to the comma-separated list of package
          prefixes given to this option.
graal.SourceSearchPath = null                                           [String[]]
          List of used-defined paths (separeted by the system's path-separator
          character) in addition to automatic SourceSearchPath detection.
graal.SpawnIsolates = true                                               [Boolean]
          Support multiple isolates. 
graal.SpeculativeStoreCheck = true                                       [Boolean]
          Speculates that arrays have exact type to optimize store checks
graal.StackRedZoneSize = 8192                                            [Integer]
          Size (in bytes) of the red zone reserved at the end of the stack. This
          stack space can only be used by critical VM code and C code, e.g., to
          report fatal errors.
graal.StackTrace = true                                                  [Boolean]
          Provide method names for stack traces.
graal.StackYellowZoneSize = 32768                                        [Integer]
          Size (in bytes) of the yellow zone reserved at the end of the stack.
          This stack space is reserved for VM use and cannot be used by the
          application.
graal.StaticExecutable = false                                           [Boolean]
          Build statically linked executable (requires static libc and zlib)
graal.StressExplicitExceptionCode = false                                [Boolean]
          Stress the code emitting explicit exception throwing code.
graal.StressInvokeWithExceptionNode = false                              [Boolean]
          Stress the code emitting invokes with explicit exception edges.
graal.StressTestEarlyReads = false                                       [Boolean]
          Stress the code by emitting reads at earliest instead of latest point.
graal.StripDebugInfo = true                                              [Boolean]
          Strip debug info from the image.
graal.SubstitutionFiles = null                                          [String[]]
          Comma-separated list of file names with declarative substitutions
graal.SupportCompileInIsolates = false                                   [Boolean]
          Support runtime compilation in separate isolates (enable at runtime
          with option CompileInIsolates).
graal.SupportJsrBytecodes = true                                         [Boolean]
graal.SupportOSRWithLocks = true                                         [Boolean]
          Support OSR compilations with locks. If DeoptAfterOSR is true we can
          per definition not have unbalanced enter/exits mappings. If
          DeoptAfterOSR is false insert artificial monitor enters after the
          OSRStart to have balanced enter/exits in the graph.
graal.TailDupOnly = ""                                                    [String]
graal.TailDuplicationProbability = 0.5                                    [Double]
graal.TailDuplicationTrivialSize = 1                                     [Integer]
graal.TearDownFailureNanos = 0                                              [Long]
          The number of nanoseconds before tearing down an isolate gives a
          failure message. 0 implies no message.
graal.TearDownWarningNanos = 0                                              [Long]
          The number of nanoseconds before and between which tearing down an
          isolate gives a warning message. 0 implies no warning.
graal.TierABackedgeNotifyFreqLog = 16                                    [Integer]
          Backedge notification frequency
graal.TierABackedgeProfileProbabilityLog = 12                            [Integer]
          Backedge profile probability
graal.TierAInvokeInlineeNotifyFreqLog = -1                               [Integer]
          Inlinee invocation notification frequency (-1 means count, but do not
          notify)
graal.TierAInvokeNotifyFreqLog = 13                                      [Integer]
          Invocation notification frequency
graal.TierAInvokeProfileProbabilityLog = 8                               [Integer]
          Invocation profile probability
graal.TieredAOT = false                                                  [Boolean]
          Do profiling and callbacks to tiered runtime
graal.Time = null                                                         [String]
          Pattern for specifying scopes in which timing is enabled. See the Dump
          option for the pattern syntax. An empty value enables all timers
          unconditionally.
graal.TimedDynamicCounters = -1                                          [Integer]
          Turn on the benchmark counters, and displays the results every n
          milliseconds
graal.Timers = null                                                       [String]
          Comma separated names of timers that are enabled irrespective of the
          value for Time option. An empty value enables all timers
          unconditionally.
graal.TraceBytecodeParserLevel = 0                                       [Integer]
          The trace level for the bytecode parser. A value of 1 enables
          instruction tracing and any greater value emits a frame state trace
          just prior to each instruction trace.Instruction tracing output from
          multiple compiler threads will be interleaved so use of this option
          make most sense for single threaded compilation. The MethodFilter
          option can be used to refine tracing to selected methods.
graal.TraceClassInitialization = false                                   [Boolean]
          Instrument code to trace and report class initialization.
graal.TraceCodeCache = false                                             [Boolean]
          Print logging information for runtime code cache modifications
graal.TraceDeoptimization = false                                        [Boolean]
          Print logging information for every deoptimization
graal.TraceDeoptimizationDetails = false                                 [Boolean]
          Print verbose logging information for every deoptimization
graal.TraceEscapeAnalysis = false                                        [Boolean]
graal.TraceExceptionHandlerStub = false                                  [Boolean]
          Trace execution of stub used to handle an exception thrown by a callee.
graal.TraceHeapChunks = false                                            [Boolean]
          Trace heap chunks during collections, if +VerboseGC and
          +PrintHeapShape.
graal.TraceHeapVerification = false                                      [Boolean]
          Trace heap verification.
graal.TraceInlineDuringParsing = false                                   [Boolean]
          Traces inlining performed during bytecode parsing.
graal.TraceInlining = false                                              [Boolean]
          Enable tracing of inlining decisions.
          Output format:
            compilation of 'Signature of the compilation root method':
              at 'Signature of the root method' ['Bytecode index']: <'Phase'> 'Child method signature': 'Decision made about this callsite'
                at 'Signature of the child method' ['Bytecode index']: 
                   |--<'Phase 1'> 'Grandchild method signature': 'First decision made about this callsite'
                   \--<'Phase 2'> 'Grandchild method signature': 'Second decision made about this callsite'
                at 'Signature of the child method' ['Bytecode index']: <'Phase'> 'Another grandchild method signature': 'The only decision made about this callsite.'
graal.TraceInliningForStubsAndSnippets = false                           [Boolean]
          Enable inlining decision tracing in stubs and snippets.
graal.TraceLIRGeneratorLevel = 0                                         [Integer]
          The trace level for the LIR generator
graal.TraceMonitorsMethodFilter = null                                    [String]
          Trace monitor operations in methods whose fully qualified name contains
          this substring.
graal.TraceMonitorsTypeFilter = null                                      [String]
          Trace monitor operations on objects whose type contains this substring.
graal.TraceObjectPromotion = false                                       [Boolean]
          Trace each object promotion.
graal.TraceParserPlugins = false                                         [Boolean]
          Traces use of plugins during bytecode parsing.
graal.TraceStackVerification = false                                     [Boolean]
          Trace stack verification.
graal.TraceTruffleAssumptions = false                                    [Boolean]
          Print stack trace on assumption invalidation
graal.TraceTruffleCompilation = false                                    [Boolean]
          Print information for compilation results
graal.TraceTruffleCompilationAST = false                                 [Boolean]
          Print the entire AST after each compilation
graal.TraceTruffleCompilationCallTree = false                            [Boolean]
          Print the inlined call tree for each compiled method
graal.TraceTruffleCompilationDetails = false                             [Boolean]
          Print information for compilation queuing
graal.TraceTruffleCompilationPolymorphism = false                        [Boolean]
          Print all polymorphic and generic nodes after each compilation
graal.TraceTruffleInlining = false                                       [Boolean]
          Print information for inlining for each compilation.
graal.TraceTruffleInliningDetails = false                                [Boolean]
          Print detailed information for inlining (i.e. the entire explored call
          tree).
graal.TraceTrufflePerformanceWarnings = false                            [Boolean]
          Print potential performance problems
graal.TraceTruffleSplitting = false                                      [Boolean]
          Print information for each splitted call site.
graal.TraceTruffleStackTraceLimit = 20                                   [Integer]
          Number of stack trace elements printed by
          TraceTruffleTransferToInterpreter and TraceTruffleAssumptions
graal.TraceTruffleTransferToInterpreter = false                          [Boolean]
          Print stack trace on transfer to interpreter.
graal.TraceUnwindStub = false                                            [Boolean]
          Trace execution of the stub that routes an exception to a handler in
          the calling frame.
graal.TraceVMOperations = false                                          [Boolean]
          Trace VMOperation execution.
graal.TrackAccessChain = false                                           [Boolean]
          Track the callers for methods and accessing methods for fields.
graal.TrackGraphSizesInDuplication = false                               [Boolean]
          Enable (if Count is enabled) graph size tracking during every
          duplication iteration.
graal.TrackInliningStatistics = none                                      [String]
          Track inlining statistics (inlining duration, call tree size, compiler
          node counts, and the number of callsites). One of: none, interactive
graal.TrackInputFlows = false                                            [Boolean]
          Track the input for type flows.
graal.TrackMemUse = null                                                  [String]
          Pattern for specifying scopes in which memory use tracking is enabled.
          See the Dump option for the pattern syntax. An empty value enables all
          memory use trackers unconditionally.
graal.TrackNodeInsertion = false                                         [Boolean]
          Track source stack trace where a node was inserted into the graph.
graal.TrackNodeSourcePosition = false                                    [Boolean]
          Track the NodeSourcePosition.
graal.TrivialInliningSize = 10                                           [Integer]
          Graphs with less than this number of nodes are trivial and therefore
          always inlined.
graal.TruffleArgumentTypeSpeculation = true                              [Boolean]
graal.TruffleBackgroundCompilation = true                                [Boolean]
          Enable asynchronous truffle compilation in background thread
graal.TruffleCheckFrameImplementation = true                             [Boolean]
          Enforce that the Truffle runtime provides the only implementation of
          Frame
graal.TruffleCheckNeverPartOfCompilation = false                         [Boolean]
          Print a warning message and stack trace when
          CompilerAsserts.neverPartOfCompilation is reachable
graal.TruffleCompilation = true                                          [Boolean]
          Enable or disable truffle compilation.
graal.TruffleCompilationExceptionsAreFatal = false                       [Boolean]
          Treat compilation exceptions as fatal exceptions that will exit the
          application
graal.TruffleCompilationExceptionsArePrinted = true                      [Boolean]
          Prints the exception stack trace for compilation exceptions
graal.TruffleCompilationExceptionsAreThrown = false                      [Boolean]
          Treat compilation exceptions as thrown runtime exceptions
graal.TruffleCompilationStatisticDetails = false                         [Boolean]
          Print additional more verbose Truffle compilation statistics at the end
          of a run.
graal.TruffleCompilationStatistics = false                               [Boolean]
          Print Truffle compilation statistics at the end of a run.
graal.TruffleCompilationThreshold = 1000                                 [Integer]
          Compile call target when call count exceeds this threshold.
graal.TruffleCompileImmediately = false                                  [Boolean]
          Compile immediately to test truffle compiler
graal.TruffleCompileOnly = null                                           [String]
          Restrict compilation to comma-separated list of includes (or excludes
          prefixed with tilde).
          EBNF format of argument value:  CompileOnly = Element, { ',', Element } ;
graal.TruffleCompilerConfiguration = null                                 [String]
          Select a compiler configuration for Truffle compilation (default: use
          Graal system compiler configuration).
graal.TruffleCompilerThreads = 0                                         [Integer]
          Manually set the number of compiler threads
graal.TruffleEnableInfopoints = false                                    [Boolean]
          Enable support for simple infopoints in truffle partial evaluations.
graal.TruffleExcludeAssertions = true                                    [Boolean]
          Exclude assertion code from Truffle compilations
graal.TruffleFirstTierCompilationThreshold = 100                         [Integer]
          Compile call target in the first tier when call count exceeds this
          threshold.
graal.TruffleFirstTierMinInvokeThreshold = 1                             [Integer]
          Minimum number of calls before a call target is compiled in the first
          tier.
graal.TruffleFunctionInlining = true                                     [Boolean]
          Enable automatic inlining of call targets
graal.TruffleInlineAcrossTruffleBoundary = false                         [Boolean]
          Enable inlining across Truffle boundary
graal.TruffleInlineDuringParsing = true                                  [Boolean]
          Inline trivial methods in Truffle graphs during native image generation
graal.TruffleInliningCutoffCountPenalty = 0.1                             [Double]
          Controls how impactful many cutoff nodes is on exploration decision in
          language-agnostic inlining.
graal.TruffleInliningExpandAllProximityBonus = 10                        [Integer]
          Controls at what point few cutoff nodes are impactful on exploration
          decisions in language-agnostic inlining.
graal.TruffleInliningExpandAllProximityFactor = 0.5                       [Double]
          Controls how impactful few cutoff nodes are on exploration decisions in
          language-agnostic inlining.
graal.TruffleInliningExpansionBudget = 50000                             [Integer]
          The base expansion budget for language-agnostic inlining.
graal.TruffleInliningExpansionCounterPressure = 2000                     [Integer]
          Controls how steep the exploration limit curve grows in
          language-agnostic inlining.
graal.TruffleInliningInliningBudget = 50000                              [Integer]
          The base inlining budget for language-agnostic inlining
graal.TruffleInliningInliningCounterPressure = 2000                      [Integer]
          Controls how steep the inlining limit curve grows in language-agnostic
          inlining
graal.TruffleInliningMaxCallerSize = 2250                                [Integer]
          Stop inlining if caller's cumulative tree size would exceed this limit
graal.TruffleInliningNodeCountPenalty = 0.1                               [Double]
          Controls how impactful the size of the subtree is on exploration
          decision in language-agnostic inlining.
graal.TruffleInliningPolicy = ""                                          [String]
          Explicitly pick a inlining policy by name. Highest priority chosen by
          default.
graal.TruffleInstrumentBoundaries = false                                [Boolean]
          Instrument Truffle boundaries and output profiling information to the
          standard output.
graal.TruffleInstrumentBoundariesPerInlineSite = false                   [Boolean]
          Instrument Truffle boundaries by considering different inlining sites
          as different branches.
graal.TruffleInstrumentBranches = false                                  [Boolean]
          Instrument branches and output profiling information to the standard
          output.
graal.TruffleInstrumentBranchesPerInlineSite = false                     [Boolean]
          Instrument branches by considering different inlining sites as
          different branches.
graal.TruffleInstrumentFilter = "*.*.*"                                   [String]
          Method filter for host methods in which to add instrumentation.
graal.TruffleInstrumentationTableSize = 10000                            [Integer]
          Maximum number of instrumentation counters available.
graal.TruffleIntrinsifyFrameAccess = true                                [Boolean]
          Intrinsify get/set/is methods of FrameWithoutBoxing to improve Truffle
          compilation time
graal.TruffleInvalidationReprofileCount = 3                              [Integer]
          Delay compilation after an invalidation to allow for reprofiling
graal.TruffleIterativePartialEscape = false                              [Boolean]
          Run the partial escape analysis iteratively in Truffle compilation.
graal.TruffleLanguageAgnosticInlining = false                            [Boolean]
          Use language-agnostic inlining (overrides the TruffleFunctionInlining
          setting, option is experimental).
graal.TruffleLegacySplitting = false                                     [Boolean]
          Use legacy splitting heuristic. This option will be removed.
graal.TruffleMaximumGraalNodeCount = 400000                              [Integer]
          Stop partial evaluation when the graph exceeded this many nodes.
graal.TruffleMaximumInlineNodeCount = 150000                             [Integer]
          Ignore further truffle inlining decisions when the graph exceeded this
          many nodes.
graal.TruffleMaximumRecursiveInlining = 2                                [Integer]
          Maximum level of recursive inlining
graal.TruffleMinInvokeThreshold = 3                                      [Integer]
          Minimum number of calls before a call target is compiled
graal.TruffleMultiTier = false                                           [Boolean]
          Whether to use multiple Truffle compilation tiers by default.
graal.TruffleOSR = true                                                  [Boolean]
          Enable on stack replacement for Truffle loops.
graal.TruffleOSRCompilationThreshold = 100000                            [Integer]
          Number of loop iterations until on-stack-replacement compilation is
          triggered.
graal.TrufflePerformanceWarningsAreFatal = false                         [Boolean]
          Treat performance warnings as fatal occurrences that will exit the
          applications
graal.TruffleProfilingEnabled = true                                     [Boolean]
          Enable/disable builtin profiles in com.oracle.truffle.api.profiles.
graal.TruffleReplaceReprofileCount = 3                                   [Integer]
          Delay compilation after a node replacement
graal.TruffleReturnTypeSpeculation = true                                [Boolean]
graal.TruffleSplitting = true                                            [Boolean]
          Enable call target splitting
graal.TruffleSplittingAllowForcedSplits = true                           [Boolean]
          Should forced splits be allowed.
graal.TruffleSplittingDumpDecisions = false                              [Boolean]
          Dumps to IGV information on polymorphic events
graal.TruffleSplittingGrowthLimit = 1.5                                   [Double]
          Disable call target splitting if the number of nodes created by
          splitting exceeds this factor times node count
graal.TruffleSplittingMaxCalleeSize = 100                                [Integer]
          Disable call target splitting if tree size exceeds this limit
graal.TruffleSplittingMaxNumberOfSplitNodes = 500000                     [Integer]
          Disable call target splitting if number of nodes created by splitting
          exceeds this limit
graal.TruffleSplittingMaxPropagationDepth = 5                            [Integer]
          Propagate info about a polymorphic specialize through maximum this many
          call targets
graal.TruffleSplittingTraceEvents = false                                [Boolean]
          Trace details of splitting events and decisions.
graal.TruffleTraceSplittingSummary = false                               [Boolean]
          Used for debugging the splitting implementation. Prints splitting
          summary directly to stdout on shutdown
graal.TrustFinalDefaultFields = true                                     [Boolean]
          Determines whether to treat final fields with default values as
          constant.
graal.TryExplodeOverPhis = true                                          [Boolean]
graal.TryPhiPhiPulls = true                                              [Boolean]
graal.TypeCheckMaxHints = 2                                              [Integer]
          The maximum number of profiled types that will be used when compiling a
          profiled type check. Note that TypeCheckMinProfileHitProbability also
          influences whether profiling info is used in compiled type checks.
graal.TypeCheckMinProfileHitProbability = 0.5                             [Double]
          If the probability that a type check will hit one the profiled types
          (up to TypeCheckMaxHints) is below this value, the type check will be
          compiled without profiling info
graal.TypeFlowPrinterInRadius = 0                                        [Integer]
          How many levels of inputs to print. A value of 0 prints only the target
          flow.
graal.TypeFlowPrinterOutRadius = 0                                       [Integer]
          How many levels of outputs to print. A value of 0 prints only the
          target flow.
graal.TypicalCallGraphSize = 200                                         [Integer]
          Denotes the call graph size that is considered medium size.
graal.TypicalGraphSize = 3250                                            [Integer]
          The typical graph size at which inlining pressure must start growing.
graal.TypicalGraphSizeInvokeBonus = 70                                   [Integer]
          The increase in estimated typical graph size after inlining, per each
          extra invoke.
graal.TypicalGraphSizeMax = 10000                                        [Integer]
          The maximum in estimated inlined typical graph size.
graal.UnresolvedIsError = true                                           [Boolean]
          Report unresolved elements as errors.
graal.UnrollMaxIterations = 16                                           [Integer]
graal.UseCAPCache = false                                                [Boolean]
          Indicate the C Annotation Processor to use previously cached native
          information when generating C Type information.
graal.UseCardRememberedSetHeap = true                                    [Boolean]
          Use a card remembered set heap for GC
graal.UseCompilationStatistics = false                                   [Boolean]
          Enables CompilationStatistics.
graal.UseCompressedReferenceShift = true                                 [Boolean]
          Use bit-shifting to enlarge the address range with narrow references.
graal.UseCompressedReferences = true                                     [Boolean]
          Use compressed references (32-bit instead of 64-bit references to Java
          objects).
graal.UseDedicatedVMOperationThread = false                              [Boolean]
          Determines if VM operations should be executed in a dedicated thread.
graal.UseEncodedGraphs = false                                           [Boolean]
          Encode and decode snippets and substitutions before parsing to test
          libgraal code path. This option is ignored in the context of libgraal.
graal.UseExceptionProbability = true                                     [Boolean]
graal.UseGraalStubs = true                                               [Boolean]
          Use Graal-generated stubs for complicated LIR operations instead of
          embedding all the emitted code.
graal.UseGraphCache = true                                               [Boolean]
          Turn on graph caching.
graal.UseIndexMasking = false                                            [Boolean]
          Use index masking after bounds check to mitigate speculative execution
          attacks.
graal.UseLoopLimitChecks = true                                          [Boolean]
graal.UseObjectInlineFeature = false                                     [Boolean]
          Enable the object inline feature. Disabling this feature will ease
          debugging issues unrelated to it.
graal.UseOnlyWritableBootImageHeap = false                               [Boolean]
          Use only a writable native image heap.
graal.UsePartialEscapeSelectiveInlining = true                           [Boolean]
          Use PartialEscapeSelectiveInliningPhase to give PartialEscape phase
          more opportunities.
graal.UsePerfData = true                                                 [Boolean]
          Flag to disable jvmstat instrumentation for performance testing.
graal.UsePriorityInlining = true                                         [Boolean]
          Use priority-based inlining.
graal.UseSnippetGraphCache = true                                        [Boolean]
          Use a cache for snippet graphs.
graal.UseSnippetTemplateCache = true                                     [Boolean]
          Use a LRU cache for snippet templates.
graal.UseTrappingNullChecks = true                                       [Boolean]
          Use traps for null checks instead of explicit null-checks
graal.UseTypeCheckHints = true                                           [Boolean]
graal.UseTypedArguments = true                                           [Boolean]
          Use typed unboxed arguments for Truffle compilations
graal.UseTypedResult = true                                              [Boolean]
          Use typed unboxed return value for Truffle compilations
graal.UserRequestedGCPolicy = "com.oracle.svm.core.genscavenge.HeapPolicy$AlwaysCollectCompletely" [String]
          Policy used when users request garbage collection.
graal.UserRequestedGCThreshold = 16777216                                   [Long]
          Defines the upper bound for the number of remaining bytes in the young
          generation that cause a collection when `System.gc` is called.
graal.VTuneAbsoluteFilenames = true                                      [Boolean]
          Use absolute path for source-filenames in VTune events.
graal.VTunePath = ""                                                      [String]
          Path to VTune installation (usually /opt/intel/vtune_amplifier)
graal.VectorIntrinsics = true                                            [Boolean]
          Enable vectorized array copy intrinsics
graal.VectorUnroll = 1                                                   [Integer]
          Unroll vectorized loops
graal.Vectorization = true                                               [Boolean]
          Enable vectorization.
graal.VectorizeAllocation = true                                         [Boolean]
          Enable vectorized array initialization
graal.VectorizeConditional = false                                       [Boolean]
          Enable vectorization of conditional code.
graal.VectorizeFoldShaped = true                                         [Boolean]
          Enable vectorization of loops implementing a higher-order 'fold'
          function.
graal.VectorizeLoops = true                                              [Boolean]
          Enable vectorization of loops
graal.VectorizeMapShaped = true                                          [Boolean]
          Enable vectorization of loops implementing a higher-order 'map'
          function.
graal.VectorizeNegativeStride = true                                     [Boolean]
          Enable vectorization of loops with negative strides.
graal.VectorizeSIMD = false                                              [Boolean]
          Enable detection of SIMD patterns
graal.VectorizeSequence = true                                           [Boolean]
          Enable vectorization of sequence values.
graal.VerboseGC = false                                                  [Boolean]
          Print more information about the heap before and after each collection
graal.Verify = null                                                       [String]
          Pattern for specifying scopes in which logging is enabled. See the Dump
          option for the pattern syntax.
graal.VerifyBalancedMonitors = false                                     [Boolean]
          Emit extra code to dynamically check monitor operations are balanced.
graal.VerifyDuplicationOperations = false                                [Boolean]
graal.VerifyGraalGraphEdges = false                                      [Boolean]
          Perform expensive verification of graph inputs, usages, successors and
          predecessors
graal.VerifyGraalGraphs = true                                           [Boolean]
          Verify graphs often during compilation when assertions are turned on
graal.VerifyGraalPhasesSize = false                                      [Boolean]
          Verify before - after relation of the relative, computed, code size of
          a graph
graal.VerifyHeap = false                                                 [Boolean]
          Verify the heap before and after each collection.
graal.VerifyHeapAfterCollection = false                                  [Boolean]
          Verify the heap after each collection.
graal.VerifyHeapAtReturn = false                                         [Boolean]
          Perform platform dependent validation of the Java heap at returns
graal.VerifyHeapBeforeCollection = false                                 [Boolean]
          Verify the heap before each collection.
graal.VerifyKillCFGUnusedNodes = false                                   [Boolean]
          Verify that there are no new unused nodes when performing killCFG
graal.VerifyNamingConventions = false                                    [Boolean]
          Verify naming conventions during image construction.
graal.VerifyPhases = false                                               [Boolean]
graal.VerifyStackAfterCollection = false                                 [Boolean]
          Verify the stack after each collection.
graal.VerifyStackBeforeCollection = false                                [Boolean]
          Verify the stack before each collection.
graal.VerifyWriteBarrierElimination = false                              [Boolean]
          Add code to verify that eliminated barriers weren't needed.
graal.Virtualize = ""                                                     [String]
          Build the native image for a virtualized environment. The argument is a
          path to a JSON file that specifies the virtualized environment
          properties.
graal.ZapChunks = false                                                  [Boolean]
          Zap memory chunks
graal.ZapConsumedHeapChunks = false                                      [Boolean]
          Zap consumed memory chunks
graal.ZapProducedHeapChunks = false                                      [Boolean]
          Zap produced memory chunks
graal.ZapStackOnMethodEntry = false                                      [Boolean]
